---
const stats = [
  {
    icon: `<svg class='w-10 h-10 mb-4' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' viewBox='0 0 24 24'><rect x='3' y='7' width='18' height='13' rx='2'/><path d='M6 7V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v3'/></svg>`,
    label: "Años de Experiencia",
    value: "15+"
  },
  {
    icon: `<svg class='w-10 h-10 mb-4' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' viewBox='0 0 24 24'><path d='M17 21v-2a4 4 0 0 0-8 0v2'/><circle cx='12' cy='7' r='4'/><path d='M22 21v-2a4 4 0 0 0-3-3.87'/><path d='M6 17.13A4 4 0 0 0 3 21v2'/></svg>`,
    label: "Clientes Satisfechos",
    value: "100+"
  },
  {
    icon: `<svg class='w-10 h-10 mb-4' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' viewBox='0 0 24 24'><circle cx='12' cy='8' r='7'/><polyline points='8.21 13.89 7.25 21 12 17.77 16.75 21 15.79 13.88'/></svg>`,
    label: "Empresas con convenio activo",
    value: "50+"
  },
  {
    icon: `<svg class='w-10 h-10 mb-4' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' viewBox='0 0 24 24'><path d='M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z'/><polyline points='9 22 9 12 15 12 15 22'/></svg>`,
    label: "Comidas Servidas",
    value: "1M+"
  }
];
---

<section class="relative bg-gradient-to-br from-[#F8F6F3] to-white py-20 overflow-hidden">
  <!-- Patrón decorativo de fondo -->
  <div class="absolute inset-0 opacity-[0.02]">
    <div class="absolute inset-0" style="background-image: radial-gradient(circle at 2px 2px, #D4AF37 1px, transparent 0); background-size: 30px 30px;"></div>
  </div>

  <!-- Decoración superior -->
  <div class="absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-transparent via-[#D4AF37] to-transparent"></div>

  <div class="container mx-auto px-4 relative z-10">
    <!-- Header de la sección -->
    <div class="text-center mb-16">
      <div class="inline-flex items-center gap-2 px-6 py-3 bg-white border border-gray-200 rounded-full text-gray-600 text-sm font-medium mb-4 shadow-sm">
        <svg width="16" height="16" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24"><polyline points="22 12 18 12 15 21 9 3 6 12 2 12"/></svg>
        Nuestra trayectoria en números
      </div>
      <h2 class="text-4xl md:text-5xl font-bold text-gray-800 mb-4">
        Experiencia que 
        <span class="bg-gradient-to-r from-[#D4AF37] to-[#B8941F] bg-clip-text text-transparent">respalda</span>
      </h2>
      <p class="text-lg text-gray-600 max-w-2xl mx-auto">
        Más de una década sirviendo excelencia gastronómica
      </p>
    </div>

    <!-- Stats Grid -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 lg:gap-8 max-w-7xl mx-auto" id="stats-grid">
      {stats.map((stat, index) => (
        <div class="group relative">
          <!-- Card -->
          <div class="relative bg-white rounded-2xl p-8 shadow-lg hover:shadow-2xl transition-all duration-500 border border-gray-100 overflow-hidden h-full">
            <!-- Gradiente decorativo en hover -->
            <div class="absolute inset-0 bg-gradient-to-br from-[#D4AF37]/5 to-[#B8941F]/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
            
            <!-- Contenido -->
            <div class="relative z-10 flex flex-col items-center text-center">
              <!-- Icono -->
              <div class="w-20 h-20 bg-gradient-to-br from-[#D4AF37]/10 to-[#B8941F]/10 rounded-2xl flex items-center justify-center mb-4 group-hover:scale-110 group-hover:rotate-6 transition-all duration-500">
                <span class="text-[#D4AF37]" set:html={stat.icon}></span>
              </div>
              
              <!-- Número -->
              <div class="text-5xl md:text-6xl font-bold mb-3 stat-value bg-gradient-to-br from-[#D4AF37] via-[#B8941F] to-[#D4AF37] bg-clip-text text-transparent" data-target={stat.value}>
                0
              </div>
              
              <!-- Label -->
              <div class="text-base font-medium text-gray-600 group-hover:text-gray-800 transition-colors">
                {stat.label}
              </div>
              
              <!-- Barra decorativa -->
              <div class="w-16 h-1 bg-gradient-to-r from-transparent via-[#D4AF37] to-transparent mt-4 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
            </div>

          </div>
        </div>
      ))}
    </div>
    
    <!-- Encabezado -->
    <div class="text-center ">
      <div class="inline-flex items-center gap-2 px-6 py-3 bg-white border border-gray-200 rounded-full text-gray-600 text-[1rem] md:text-xl font-medium  shadow-sm md:mt-20 mt-10">
        <svg width="40" height="40" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24"><polyline points="22 12 18 12 15 21 9 3 6 12 2 12"/></svg>
        Nuestros clientes
      </div>
      <!-- <p class="text-lg text-gray-600 max-w-2xl mx-auto">
        Más de 50 empresas líderes de la región
      </p> -->
    </div>

    <!-- Botón a la sección de clientes -->
    <!-- <div class="text-center mt-8">
      <a href="/servicios" class="inline-block px-8 py-3 bg-[#D4AF37] text-white font-semibold rounded-full shadow-md hover:bg-[#B8941F] transition-colors">
        Ver nuestros servicios
      </a>
    </div> -->
  </div>

  <!-- Decoración inferior -->
  <div class="absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-transparent via-[#D4AF37] to-transparent"></div>
</section>

<script>
  function animateValue(element: HTMLElement, start: number, end: number, duration: number, suffix: string = '') {
    const startTimestamp = performance.now();
    
    const step = (timestamp: number) => {
      const progress = Math.min((timestamp - startTimestamp) / duration, 1);
      const easeOutQuart = 1 - Math.pow(1 - progress, 4);
      const current = Math.floor(easeOutQuart * (end - start) + start);
      
      element.textContent = current.toLocaleString() + suffix;
      
      if (progress < 1) {
        requestAnimationFrame(step);
      } else {
        element.textContent = end.toLocaleString() + suffix;
      }
    };
    
    requestAnimationFrame(step);
  }

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const statElements = entry.target.querySelectorAll('.stat-value');
        
        statElements.forEach((element) => {
          const target = (element as HTMLElement).getAttribute('data-target');
          if (target) {
            const match = target.match(/^(\d+)(.*)$/);
            if (match) {
              const num = parseInt(match[1]);
              const suffix = match[2];
              animateValue(element as HTMLElement, 0, num, 2000, suffix);
            }
          }
        });
        
        observer.unobserve(entry.target);
      }
    });
  }, {
    threshold: 0.3
  });

  const statsGrid = document.getElementById('stats-grid');
  if (statsGrid) {
    observer.observe(statsGrid);
  }
</script>